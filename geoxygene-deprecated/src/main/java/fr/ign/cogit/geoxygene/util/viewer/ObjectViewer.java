/* * This file is part of the GeOxygene project source files. *  * GeOxygene aims at providing an open framework which implements OGC/ISO * specifications for the development and deployment of geographic (GIS) * applications. It is a open source contribution of the COGIT laboratory at the * Institut Géographique National (the French National Mapping Agency). *  * See: http://oxygene-project.sourceforge.net *  * Copyright (C) 2005 Institut Géographique National *  * This library is free software; you can redistribute it and/or modify it under * the terms of the GNU Lesser General Public License as published by the Free * Software Foundation; either version 2.1 of the License, or any later version. *  * This library is distributed in the hope that it will be useful, but WITHOUT * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more * details. *  * You should have received a copy of the GNU Lesser General Public License * along with this library (see file LICENSE if present); if not, write to the * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307 USA */package fr.ign.cogit.geoxygene.util.viewer;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.net.URL;import java.util.Observable;import fr.ign.cogit.geoxygene.api.feature.IFeature;import fr.ign.cogit.geoxygene.api.feature.IFeatureCollection;import fr.ign.cogit.geoxygene.datatools.Geodatabase;/** * 2007 : amélioration de la gestion de la fermeture - grosso *  * @author Thierry Badard & Arnaud Braun * @version 1.1 *  */public class ObjectViewer extends Observable {  private static final String OBJECTVIEWER_TITLE = "GeOxygene Object Viewer";  public static boolean flagWindowClosing = true;  public ObjectViewerInterface objectViewerInterface;  /** Creates a new ObjectViewer without connection to a Geodatabase. */  public ObjectViewer() {    this(null);  }  /** Creates a new ObjectViewer with a connection to a Geodatabase. */  public ObjectViewer(Geodatabase db) {    this.objectViewerInterface = new ObjectViewerInterface(        ObjectViewer.OBJECTVIEWER_TITLE, db);    this.addObserver(this.objectViewerInterface);    this.objectViewerInterface.pack();    this.objectViewerInterface.setSize(600, 400);    // objectViewerInterface.show();    this.objectViewerInterface.setVisible(true);    this.objectViewerInterface.addWindowListener(new WindowAdapter() {      @Override      public void windowClosing(WindowEvent e) {        if (ObjectViewer.flagWindowClosing) {          System.exit(0);        } else {          ObjectViewer.this.objectViewerInterface.dispose();        }      }    });  }  /**   * Display objects stored in the FeatureCollection as a Theme with the given   * name.   */  public void addFeatureCollection(IFeatureCollection<?> fColl, String themeName) {    this.objectViewerInterface.addAFeatureCollectionTheme(fColl, themeName);  }  /**   * Refresh fully the FeatureCollection displayed in the viewer with this given   * name.   */  public void refreshFeatureCollection(IFeatureCollection<?> fColl,      String themeName) {    this.objectViewerInterface.refreshAFeatureCollectionTheme(fColl, themeName);  }  /**   * Refresh the FeatureCollection displayed in the viewer with this given name   * with this feature.   *    * The feature must already belong to the collection.   */  public void refreshFeatureCollection(IFeature feature, String themeName) {    this.objectViewerInterface.refreshAFeatureCollectionTheme(feature,        themeName);  }  /**   * Display objects stored in the shapefile given by url (without .shp) in an   * ObjectViewer.   */  public void addAShapefile(URL url) {    this.objectViewerInterface.addAShapefileTheme(url);  }  /** Display an image (.jpg or .gif) in an ObjectViewer. */  public void addAnImage(URL url, int x, int y, int width, int height) {    this.objectViewerInterface.addAnImageTheme(url.getFile(), x, y, width,        height);  }}